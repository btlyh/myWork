package com.cambrian.dfhm.friend;

import java.util.ArrayList;

import com.cambrian.common.net.ByteBuffer;
import com.cambrian.common.net.DataAccessException;
import com.cambrian.common.object.DBSerializable;
import com.cambrian.common.object.Serializable;


/**
 * 类说明：好友列表
 * 
 * @version 1.0
 * @date 2013-5-29
 * @author maxw<woldits@qq.com>
 */
public class FriendList
{

	/* static fields */

	/* static methods */

	/* fields */
	/** 好友列表 */
	ArrayList<Friend> friendList;
	/** 申请列表 */
	ArrayList<Friend> applyList;

	/* constructors */

	/* properties */

	/* init start */

	/* methods */
	/** 是否好友 */
	private boolean isFriend(int uid)
	{
		for (Friend friend : friendList)
			if(friend.getUId() == uid) 
				return true;
		return false;
	}
	
	/** 是否申请好友 */
	private boolean isApplyFriend(int uid)
	{
		for (Friend friend : applyList)
			if(friend.getUId() == uid) 
				return true;
		return false;
	}
	
	/** 添加好友 */
	public void addFriend(int uid)
	{
		String error = checkAddFriend(uid);
		if(error != null) 
			throw new DataAccessException(601, error);
//		friendList.add(player);
		removeApply(uid);
	}
	
	/** 添加申请好友 */
	public void addApply(int uid)
	{
		String error = checkAddApply(uid);
		if(error != null) 
			throw new DataAccessException(601, error);
//		applyList.add(player);
	}
	
	/** 检查添加申请好友 */
	private String checkAddApply(int uid)
	{
		if(isApplyFriend(uid))
			return "已经是申请好友";
		return null;
	}
	
	/** 删除申请好友 */
	private void removeApply(int uid)
	{
		for (Friend friend : applyList)
		{
			if(friend.getUId() == uid)
			{
				applyList.remove(friend);
				break;
			}
		}
	}
	
	/** 拒绝申请 */
	public void refuseFriend(int uid)
	{
		String error = checkRefuseFriend(uid);
		if(error != null) 
			throw new DataAccessException(601, error);
		removeApply(uid);
	}
	
	/** 检查拒绝申请 */
	private String checkRefuseFriend(int uid)
	{
		if(!isApplyFriend(uid))
			return "申请好友不存在";
		return null;
	}
	
	/** 检查添加好友 */
	private String checkAddFriend(int uid)
	{
		if(isFriend(uid))
			return "已经是好友";
		return null;
	}
	
	/** 删除好友 */
	public void removeFriend(int uid)
	{
		String error = checkRemoveFriend(uid);
		if(error != null) 
			throw new DataAccessException(601, error);
		for (Friend friend : friendList)
		{
			if(friend.getUId() == uid)
			{
				friendList.remove(friend);
				break;
			}
		}
	}
	
	/** 检查删除好友 */
	private String checkRemoveFriend(int uid)
	{
		if(!isFriend(uid))
			return "不是好友";
		return null;
	}

	/* common methods */

	/* inner class */
	
}
