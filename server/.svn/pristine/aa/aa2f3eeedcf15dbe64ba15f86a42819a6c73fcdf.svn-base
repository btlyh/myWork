package com.cambrian.dfhm.battle;

import com.cambrian.common.net.ByteBuffer;

/**
 * 类说明：
 * @author：Sebastian
 * 
 */
public class Formation {

	/* static fields */

	/* static methods */

	/* fields */
	BattleCard[][] battleCrad;

	/* constructors */
	public Formation()
	{
		battleCrad = new BattleCard[3][5];
	}
	
	/* properties */

	/* init start */

	/* methods */
	/** 改变指定阵型位的对象 */
	public void changeFormation(int formationIndex, int index, BattleCard bCard)
	{
		battleCrad[formationIndex][index] = bCard;
	}
	
	/** 获得指定的阵型数组 */
	public BattleCard[] getFormation(int formationIndex)
	{
		return battleCrad[formationIndex];
	}
	
	/** 获得指定位置的上阵对象 */
	public BattleCard getBattleCard(int formationIndex, int index)
	{
		return battleCrad[formationIndex][index];
	}
	
	/** 序列化给前台 */
	public void bytesWrite(ByteBuffer data)
	{
		BattleCard bCard;
		for (int i = 0; i < 3; i++) {
			data.writeInt(5);
			for (int j = 0; j < 5; j++) {
				bCard = getBattleCard(i, j);
				if(bCard == null)
				{
					data.writeInt(-1);
				}
				else
				{
					data.writeInt(1);
					bCard.bytesWrite(data);
				}
			}
		}
	}
	
	/** 序列化(和dc通信) */
	public void dbBytesWrite(ByteBuffer data)
	{
		System.err.println("------Formation.dbBytesWrite--------");
		System.err.println("-------battleCrad_1---------");
		BattleCard bCard;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 5; j++)
			{
				bCard = battleCrad[i][j];
				if(bCard == null)
				{
					data.writeInt(-1);
				}
				else
				{
					data.writeInt(1);
					bCard.dbBytesWrite(data);
				}
			}
		}
	}
	
	/** 反序列化(和dc通信) */
	public void dbBytesRead(ByteBuffer data)
	{
		System.err.println("------Formation.dbBytesRead--------");
		if(battleCrad == null)
			battleCrad = new BattleCard[3][5];
		int temp;
		BattleCard bCard;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 5; j++)
			{
				temp = data.readInt();
				if(temp == 1)
				{
					bCard = new BattleCard();
					bCard.dbBytesRead(data);
					battleCrad[i][j] = bCard;
				}
			}
		}
	}
}
