package com.cambrian.dfhm.battle;

import java.util.ArrayList;
import java.util.Random;

/**
 * 战斗计算类
 */
public class BattleAct
{
	/* static fields */
	/** Buffer状态: 1=治疗, 2=中毒, 3=眩晕, 4=连击, 5=狂怒, 6=追杀, 7=加攻, 8=减伤, 9=免伤 */
	public static final int TREAT = 1, POISON = 2, DIZZY = 3, ATTACKS = 4, ANGER = 5, CHASE = 6, 
			INCRHURT = 7, DECRHURT = 8, NOHURT = 9;
	/** 攻击范围: 0=默认, 1=随机， 2=纵向，3=横向, 4=敌全体, 5=己全体, 6=左斜, 7=右斜, 8=中间, 9=己方血少， 10=敌方血少 */
	public static final int DEFAULT = 0, RANDOM = 1, ENDLONG = 2, HORIZONTAL = 3, ENEMYALL = 4, 
			OWNALL = 5, LEFTINCLINED = 6, RIGHTINCLINED = 7, MITTLE = 8, OWNHPMIN = 9, ENEMYHPMIN = 10;

	/* static methods */

	/* fields */
	public static Random ran = new Random();

	/* constructors */

	/* properties */

	/* init start */

	/* methods */
	/**
	 * 默认――攻击范围
	 * @param aimIndex	目标位置
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] defaultAtt(int aimIndex, BattleCard[] aimList)
	{
		int[] aim = null;
		if(aimList[aimIndex] == null || aimList[aimIndex].getCurHp() <= 0)
		{
			for (BattleCard battleCard : aimList) {
				if(battleCard != null && battleCard.getCurHp() > 0)
				{										
					if(aimIndex == 1 && battleCard.getIndex() == 3)
						aim = new int[]{4};
					else
						aim = new int[]{battleCard.getIndex()};
					return aim;
				}
			}
		}
		else
			aim = new int[]{aimList[aimIndex].getIndex()};
		return aim;
	}
	
	/**
	 * 随机――攻击范围
	 * @param aimList
	 * @return	攻击目标
	 */
	public static int[] randomAtt(BattleCard[] aimList)
	{
		ArrayList<Integer>list = new ArrayList<Integer>();
		for (BattleCard battleCard : aimList) {
			if(battleCard != null && battleCard.getCurHp() > 0)
				list.add(battleCard.getIndex());
		}
		return new int[]{ran.nextInt(list.size())};
	}
	
	/**
	 * 纵向――攻击范围
	 * @param aimCard	目标对象
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] endLongAtt(BattleCard aimCard, BattleCard[] aimList)
	{
		int[] aim = null;
		if(aimCard == null || aimCard.getCurHp() <= 0)
		{
			for (BattleCard battleCard : aimList) {
				if(battleCard != null && battleCard.getCurHp() > 0)
				{
					aimCard = battleCard;					
					break;
				}
			}
		}
		if(aimCard.getIndex() == 0 || aimCard.getIndex() == 3)
			aim = new int[]{0,3};
		else if(aimCard.getIndex() == 2)
			aim = new int[]{2};
		else 
			aim = new int[]{1,4};
		return aim;
	}
	
	/**
	 * 横向――攻击范围
	 * @param aimCard	目标对象
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] horizontalAtt(BattleCard aimCard, BattleCard[] aimList)
	{
		int[] aim = null;
		if(aimCard == null || aimCard.getCurHp() <= 0)
		{
			for (BattleCard battleCard : aimList) {
				if(battleCard != null && battleCard.getCurHp() > 0)
				{
					aimCard = battleCard;					
					break;
				}
			}
		}
		if(aimCard.getIndex() < 2)
			aim = new int[]{0,1};
		else if(aimCard.getIndex() < 3)
			aim = new int[]{2};
		else 
			aim = new int[]{3,4};
		return aim;
	}
	
	/**
	 * 左斜――攻击范围
	 * @param aimCard	目标对象
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] leftInclinedleAtt(BattleCard aimCard, BattleCard[] aimList)
	{
		int[] aim = null;
		if(aimCard == null || aimCard.getCurHp() <= 0)
		{
			for (BattleCard battleCard : aimList) {
				if(battleCard != null && battleCard.getCurHp() > 0)
				{
					aimCard = battleCard;					
					break;
				}
			}
		}
		if(aimCard.getIndex() % 2 == 0)
			aim = new int[]{0,2,4};						
		else 
		{
			aim = new int[]{aimCard.getIndex()};
		}
		return aim;
	}
	
	/**
	 * 左斜――攻击范围
	 * @param aimCard	目标对象
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] rightInclinedleAtt(BattleCard aimCard, BattleCard[] aimList)
	{
		int[] aim = null;
		if(aimCard == null || aimCard.getCurHp() <= 0)
		{
			for (BattleCard battleCard : aimList) {
				if(battleCard != null && battleCard.getCurHp() > 0)
				{
					aimCard = battleCard;
					break;
				}
			}
		}
		if(aimCard.getIndex() == 1 || aimCard.getIndex() == 2 ||
				aimCard.getIndex() == 3)
			aim = new int[]{1,2,3};						
		else 
			aim = new int[]{aimCard.getIndex()};
		return aim;
	}
	
	/**
	 * 中间――攻击范围
	 * @param aimList	对象链表
	 * @return	攻击目标
	 */
	public static int[] mittleAtt(BattleCard[] aimList)
	{
		int[] aim = null;
		BattleCard aimCard = aimList[2];
		if(aimCard == null || aimCard.getCurHp() <= 0)
		{
			defaultAtt(0, aimList);
		}
		else
		{
			aim = new int[]{2};
		}
		return aim;
	}
	
	/**
	 * 血最少――攻击范围
	 * @param aimList
	 * @return
	 */
	public static int[] HpMin(BattleCard[] aimList)
	{
		BattleCard aimCard, aimCard_;
		int index = 0;
		for (int i = 0; i < aimList.length; i++) {
			aimCard = aimList[i];
			if(aimCard != null && aimCard.getCurHp() > 0)
			{
				index = aimCard.getIndex();
				for (int j = i + 1; j < aimList.length; j++) {
					aimCard_ = aimList[j];
					if(aimCard_ != null && aimCard_.getCurHp() > 0 && aimCard.getCurHp() > aimCard_.getCurHp()	)					
						aimCard = aimCard_;					
				}
				index = aimCard.getIndex();
				break;
			}					
		}
		return new int[]{index};
	}
	
	/**
	 * 获取普通攻击值
	 * @param battleCard
	 * @return
	 */
	public static int getAttValue(BattleCard attCard)
	{
		int hurt = attCard.getAtt() + attCard.getAtt() * (ran.nextInt() % 6) / 100;	
		return hurt;
	}
}
