package com.cambrian.dfhm.common;

import java.util.ArrayList;

import com.cambrian.common.actor.Actor;
import com.cambrian.common.net.ByteBuffer;
import com.cambrian.common.object.Sample;
import com.cambrian.common.util.ChangeListener;
import com.cambrian.common.util.TimeKit;
import com.cambrian.dfhm.bag.CardBag;
import com.cambrian.dfhm.battle.BattleCard;
import com.cambrian.dfhm.battle.Formation;
import com.cambrian.dfhm.card.Card;
import com.cambrian.dfhm.card.CardContainer;
import com.cambrian.dfhm.friend.FriendList;
import com.cambrian.dfhm.instancing.entity.AttRecord;
import com.cambrian.dfhm.mail.entity.Mail;
import com.cambrian.dfhm.message.MessageContainer;
import com.cambrian.dfhm.task.TaskContainer;
import com.cambrian.dfhm.timer.TokenTimer;

/**
 * 类说明：角色类
 * 
 * @version 1.0
 * @author
 */
public class Player extends Sample implements Actor
{
	private static final int UPDATE_PLAYER = 0;

	private long userid;
	private String nickname;
	/** 游戏币 */
	private int money;
	/** RMB */
	private int gold;
	/** 当前军令 */
	private int curToken;
	/** 最大军令 */
	private int maxtToken;
	/** 武魂 */
	private int soul;
	/** 积分 */
	private int normalPoint;
	/** 监听者 */
	public ChangeListener listener;
	/** 卡牌背包 */
	private CardBag cardBag = new CardBag();
	// /** 卡片图鉴 */
	// public CardContainer card;
	/** 好友 */
	public FriendList friendList;
	/** 消息,在加载时执行操作 */
	public MessageContainer message;
	// /** 任务 */
	// public TaskContainer task;
	public Formation formation = new Formation();
	/** 玩家今日已购买军令数量 */
	private int buyTokenNum;
	/** 玩家当前VIP等级 */
	private int vipLevel;
	/** 玩家下线时间记录 */
	private long logoutTime;
	/** 玩家邮件列表 */
	private ArrayList<Mail> mailList = new ArrayList<Mail>();

	/** 获得玩家id */
	public long getUserId()
	{
		return userid;
	}

	/** 当前可以挑战普通副本NPC的位置 */
	private int curIndexForNormalNPC = 1;
	/** 当前可以挑战挑战副本NPC的位置 */
	private int curIndexForHardNPC;
	/** 当前可以挑战穿越副本NPC的位置 */
	private int curIndexForCorssNPC;
	/** 玩家攻击记录列表 */
	private ArrayList<AttRecord> attRecords = new ArrayList<AttRecord>();
	/** 设置玩家id */
	public void setUserId(long uid)
	{
		this.userid = uid;
	}

	public String getNickname()
	{
		return nickname;
	}

	public void setNickname(String nickname)
	{
		this.nickname = nickname;
	}

	public int getMoney()
	{
		return money;
	}

	public void setMoney(int money)
	{
		this.money = money;
	}

	public int getGold()
	{
		return gold;
	}

	public void setGold(int gold)
	{
		this.gold = gold;
	}

	public int getCurToken()
	{
		return curToken;
	}

	public void setCurToken(int curToken)
	{
		this.curToken = curToken;
	}

	public int getMaxToken()
	{
		return maxtToken;
	}

	public void setMaxToken(int maxtToken)
	{
		this.maxtToken = maxtToken;
	}

	public int getSoul()
	{
		return soul;
	}

	public void setSoul(int soul)
	{
		this.soul = soul;
	}

	public CardBag getCardBag()
	{
		return cardBag;
	}

	public void setCardBag(CardBag cardBag)
	{
		this.cardBag = cardBag;
	}

	public int getBuyTokenNum()
	{
		return buyTokenNum;
	}

	public void setBuyTokenNum(int buyTokenNum)
	{
		this.buyTokenNum = buyTokenNum;
	}

	public int getVipLevel()
	{
		return vipLevel;
	}

	public void setVipLevel(int vipLevel)
	{
		this.vipLevel = vipLevel;
	}

	public long getLogoutTime()
	{
		return logoutTime;
	}

	public void setLogoutTime(long logoutTime)
	{
		this.logoutTime = logoutTime;
	}

	public int getNormalPoint()
	{
		return normalPoint;
	}

	public void setNormalPoint(int normalPoint)
	{
		this.normalPoint = normalPoint;
	}

	public int getCurIndexForNormalNPC()
	{
		return curIndexForNormalNPC;
	}

	public void setCurIndexForNormalNPC(int curIndexForNormalNPC)
	{
		this.curIndexForNormalNPC = curIndexForNormalNPC;
	}

	public int getCurIndexForHardNPC()
	{
		return curIndexForHardNPC;
	}

	public void setCurIndexForHardNPC(int curIndexForHardNPC)
	{
		this.curIndexForHardNPC = curIndexForHardNPC;
	}

	public int getCurIndexForCorssNPC()
	{
		return curIndexForCorssNPC;
	}

	public void setCurIndexForCorssNPC(int curIndexForCorssNPC)
	{
		this.curIndexForCorssNPC = curIndexForCorssNPC;
	}

	public ArrayList<AttRecord> getAttRecords()
	{
		return attRecords;
	}

	public void setAttRecords(ArrayList<AttRecord> attRecords)
	{
		this.attRecords = attRecords;
	}

	/** 更新消息 */
	public void update()
	{
		if (listener != null)
			listener.change(this, UPDATE_PLAYER);
	}

	/** player的初始化 */
	public void init()
	{
		Card card;
		BattleCard bCard;
		// for (int i = 0; i < 1; i++) {
		card = cardBag.add(50005);
		card.uid = 1;
		System.err.println("id !!!=======" + card.getId());
		card.setAttRange(10);
		card.setForsterNumber(100);
		bCard = new BattleCard(card.getId(), card.getName(), card.getAvatar(), card.getTinyAvatar(), card.getLevel(), card.getAtt(),
				card.getSkillRate(), card.getDoubleSkill(), card.getAttRange(), card.getSkillId(), card.getMaxHp(), card.getCurHp(), 0,
				card.getAimType(), card.getCritRate(), card.getDodgeRate(), 0, card.getType());
		formation.changeFormation(0, bCard);
		System.err.println("skillName !!!=======" + bCard.getSkill().getName());

		card = cardBag.add(50004);
		card.uid = 2;
		card.setAttRange(1);
		card.setForsterNumber(100);
		System.err.println("id !!!=======" + card.getId());
		bCard = new BattleCard(card.getId(), card.getName(), card.getAvatar(), card.getTinyAvatar(), card.getLevel(), card.getAtt(),
				card.getSkillRate(), card.getDoubleSkill(), card.getAttRange(), card.getSkillId(), card.getMaxHp(), card.getCurHp(), 4,
				card.getAimType(), card.getCritRate(), card.getDodgeRate(), 0, card.getType());
		formation.changeFormation(4, bCard);
		System.err.println("skillName !!!=======" + bCard.getSkill().getName());
		
//		card = cardBag.add(50002);
//		card.uid = 3;
//		card = cardBag.add(50003);
//		card.uid = 4;
//		card = cardBag.add(50004);
//		card.uid = 5;
		// card = cardBag.add(50003);
		// System.err.println("id !!!======="+card.getId());
		// card.init();
		// bCard = new BattleCard(card.getId(), card.getName(),
		// card.getAvatar(), card.getTinyAvatar(),
		// card.getLevel(), card.getAtt(), card.getSkillRate(),
		// card.getDoubleSkill(),
		// card.getAttRange(), card.getSkillId(), card.getMaxHp(),
		// card.getCurHp(), 2,
		// card.getAimType(), card.getCritRate(), card.getDodgeRate(), 0,
		// card.getType(), card.getAttIndex());
		// formation.changeFormation(0, 2, bCard);
		//
		// card = cardBag.add(50002);
		// System.err.println("id !!!======="+card.getId());
		// card.init();
		// bCard = new BattleCard(card.getId(), card.getName(),
		// card.getAvatar(), card.getTinyAvatar(),
		// card.getLevel(), card.getAtt(), card.getSkillRate(),
		// card.getDoubleSkill(),
		// card.getAttRange(), card.getSkillId(), card.getMaxHp(),
		// card.getCurHp(), 3,
		// card.getAimType(), card.getCritRate(), card.getDodgeRate(), 0,
		// card.getType(), card.getAttIndex());
		// formation.changeFormation(0, 3, bCard);
		//
		// card = cardBag.add(50001);
		// System.err.println("id !!!======="+card.getId());
		// card.init();
		// bCard = new BattleCard(card.getId(), card.getName(),
		// card.getAvatar(), card.getTinyAvatar(),
		// card.getLevel(), card.getAtt(), card.getSkillRate(),
		// card.getDoubleSkill(),
		// card.getAttRange(), card.getSkillId(), card.getMaxHp(),
		// card.getCurHp(), 4,
		// card.getAimType(), card.getCritRate(), card.getDodgeRate(), 0,
		// card.getType(), card.getAttIndex());
		// formation.changeFormation(0, 4, bCard);

		// BattleCard[] bCard_ = formation.getFormation(0);
		// for (BattleCard battleCard : bCard_) {
		// System.err.println(battleCard.getName()+", index ==="+battleCard.getIndex());
		// }
		// }
	}

	public void incrMoney(int money)
	{
		this.money += money;
	}

	public void decrMoney(int money)
	{
		this.money -= money;
	}

	public void incrGold(int gold)
	{
		this.gold += gold;
	}

	public void decrGold(int gold)
	{
		this.gold -= gold;
	}

	public synchronized void decrToken(int token)
	{
		this.curToken -= token;
	}

	public synchronized void incrToken(int token)
	{
		this.curToken += token;
	}

	public void incrSoul(int soul)
	{
		this.soul -= soul;
	}

	public void incrNormalPoint(int normalPoint)
	{
		this.normalPoint += normalPoint;

	}

	public ArrayList<Mail> getMailList()
	{
		return mailList;
	}

	/** 获得玩家卡牌背包容量 */
	public int getCardBagCount()
	{
		return cardBag.getCapacity() - cardBag.getListCount();// +
																// battleCard.length;
	}

	/** 获得玩家未读邮件数量 */
	public int getUnreadMailCount()
	{
		int count = 0;
		for (Mail mail : mailList)
		{
			if (mail.getState() == Mail.MAILSTATE_UNREAD)
			{
				count++;
			}
		}
		return count;
	}

	public void addMail(Mail mail)
	{
		mailList.add(mail);

	}

	public void addAttRecord(AttRecord attRecord)
	{
		attRecords.add(attRecord);
	}

	/** 序列化(前台登陆时获取的数据) */
	@Override
	public void bytesWrite(ByteBuffer data)
	{
		System.err.println("-------序列化(前台登陆时获取的数据)---------");
		data.writeLong(userid);
		data.writeUTF(nickname);
		data.writeInt(money);
		data.writeInt(gold);
		data.writeInt(curToken);
		data.writeInt(maxtToken);
		data.writeInt(soul);
		// System.err.println("userid ==="+userid);
		// System.err.println("nickname ==="+nickname);
		// System.err.println("money ==="+money);
		// System.err.println("gold ==="+gold);
		// System.err.println("curToken ==="+curToken);
		// System.err.println("maxtToken ==="+maxtToken);
		// System.err.println("soul ==="+soul);
		ArrayList<Card> cardList = cardBag.getList();
		data.writeInt(cardList.size());
		// System.err.println("cardList.size() ==="+cardList.size());
		for (Card card : cardList)
		{
			card.bytesWrite(data);
		}
		formation.bytesWrite(data);
		data.writeInt(buyTokenNum);
		data.writeInt(mailList.size());
		for (Mail mail : mailList)
		{
			mail.bytesWrite(data);
		}
		data.writeInt(curIndexForNormalNPC);
		data.writeInt(curIndexForHardNPC);
		data.writeInt(curIndexForCorssNPC);
		data.writeInt(attRecords.size());
		for (AttRecord attRecord : attRecords)
		{
			attRecord.bytesWrite(data);
		}
	}

	/** 序列化(和dc通信) */
	public void dbBytesWrite(ByteBuffer data)
	{
		System.err.println("-------序列化(和dc通信)---------");
		data.writeLong(userid);
		data.writeUTF(nickname);
		data.writeInt(money);
		data.writeInt(gold);
		data.writeInt(curToken);
		data.writeInt(maxtToken);
		data.writeInt(soul);
		// System.err.println("userid ==="+userid);
		// System.err.println("nickname ==="+nickname);
		// System.err.println("money ==="+money);
		// System.err.println("gold ==="+gold);
		// System.err.println("curToken ==="+curToken);
		// System.err.println("maxtToken ==="+maxtToken);
		// System.err.println("soul ==="+soul);
		if (cardBag == null)
			cardBag = new CardBag();
		cardBag.dbBytesWrite(data);
		if (formation == null)
			formation = new Formation();
		formation.dbBytesWrite(data);
		// data.writeBoolean(realm);
		data.writeInt(buyTokenNum);
		data.writeLong(logoutTime);
		data.writeInt(mailList.size());
		for (Mail mail : mailList)
		{
			mail.dbBytesWrite(data);
		}
		data.writeInt(curIndexForNormalNPC);
		data.writeInt(curIndexForHardNPC);
		data.writeInt(curIndexForCorssNPC);
		data.writeInt(attRecords.size());
		for (AttRecord attRecord : attRecords)
		{
			attRecord.bytesWrite(data);
		}
	}

	/** 反序列化(和dc通信) */
	public void dbBytesRead(ByteBuffer data)
	{
		System.err.println("-------反序列化(和dc通信)---------");
		userid = data.readLong();
		nickname = data.readUTF();
		money = data.readInt();
		gold = data.readInt();
		curToken = data.readInt();
		maxtToken = data.readInt();
		soul = data.readInt();
		System.err.println("userid ===" + userid);
		System.err.println("nickname ===" + nickname);
		System.err.println("money ===" + money);
		System.err.println("gold ===" + gold);
		System.err.println("curToken ===" + curToken);
		System.err.println("maxtToken ===" + maxtToken);
		System.err.println("soul ===" + soul);
		if (cardBag == null)
			cardBag = new CardBag();
		cardBag.dbBytesRead(data);
		if (formation == null)
			formation = new Formation();
		formation.dbBytesRead(data);
		// realm = data.readBoolean();
		buyTokenNum = data.readInt();
		logoutTime = data.readLong();
		int len = data.readInt();
		for (int i = 0; i < len; i++)
		{
			Mail mail = new Mail();
			mail.dbBytesRead(data);
			mailList.add(mail);
		}
		curIndexForNormalNPC = data.readInt();
		curIndexForHardNPC = data.readInt();
		curIndexForCorssNPC = data.readInt();
		len = data.readInt();
		for (int i = 0; i < len; i++)
		{
			AttRecord attRecord = new AttRecord();
			attRecord.dbBytesRead(data);
			attRecords.add(attRecord);
		}
	}

	@Override
	public String toString()
	{
		return "Player [userid=" + userid + ", nickname=" + nickname + "]";
	}

	/**
	 * 登陆时初始化军令
	 */
	public void initToken()
	{
		long times;
		if ((times = (TimeKit.nowTimeMills() - logoutTime) / TokenTimer.TOKENADDTIME) < 1)
		{
			return;
		}
		incrToken((int) times * TokenTimer.TOKENADDNUM);
	}
	/* inner class */
}
